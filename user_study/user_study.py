#!/usr/bin/env python3
"""
TELJES MEGOLD√ÅS - User Study with CSV Processing + Images
A `processed_recipes.csv` l√©trehoz√°sa √©s haszn√°lata
"""

import os
import sys
import sqlite3
import datetime
import random
import pandas as pd
import numpy as np
from pathlib import Path
from flask import Blueprint, render_template, request, session, redirect, url_for, jsonify

# Project path setup
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Blueprint - TEMPLATE PATH FIX
user_study_bp = Blueprint('user_study', __name__, 
                         url_prefix='',
                         template_folder='templates/user_study')

class UserStudyDatabase:
    """Adatb√°zis kezel≈ë"""
    
    def __init__(self, db_path="user_study.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def init_database(self):
        conn = self.get_connection()
        
        # Participants
        conn.execute('''
            CREATE TABLE IF NOT EXISTS participants (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                age_group TEXT NOT NULL,
                education TEXT NOT NULL,
                cooking_frequency TEXT NOT NULL,
                sustainability_awareness INTEGER NOT NULL,
                version TEXT NOT NULL,
                is_completed BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Interactions
        conn.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                recipe_id INTEGER,
                rating INTEGER,
                explanation_helpful INTEGER,
                view_time_seconds REAL,
                interaction_order INTEGER,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        # Questionnaire
        conn.execute('''
            CREATE TABLE IF NOT EXISTS questionnaire (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                system_usability INTEGER,
                recommendation_quality INTEGER,
                trust_level INTEGER,
                explanation_clarity INTEGER,
                sustainability_importance INTEGER,
                overall_satisfaction INTEGER,
                additional_comments TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def create_user(self, age_group, education, cooking_frequency, sustainability_awareness, version):
        conn = self.get_connection()
        cursor = conn.execute('''
            INSERT INTO participants (age_group, education, cooking_frequency, sustainability_awareness, version)
            VALUES (?, ?, ?, ?, ?)
        ''', (age_group, education, cooking_frequency, sustainability_awareness, version))
        
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id
    
    def log_interaction(self, user_id, recipe_id, rating, explanation_helpful=None, view_time=None, interaction_order=None):
        conn = self.get_connection()
        conn.execute('''
            INSERT INTO interactions (user_id, recipe_id, rating, explanation_helpful, view_time_seconds, interaction_order)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, recipe_id, rating, explanation_helpful, view_time, interaction_order))
        conn.commit()
        conn.close()
    
    def save_questionnaire(self, user_id, responses):
        conn = self.get_connection()
        conn.execute('''
            INSERT INTO questionnaire 
            (user_id, system_usability, recommendation_quality, trust_level, 
             explanation_clarity, sustainability_importance, overall_satisfaction, additional_comments)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            responses.get('system_usability'),
            responses.get('recommendation_quality'),
            responses.get('trust_level'),
            responses.get('explanation_clarity'),
            responses.get('sustainability_importance'),
            responses.get('overall_satisfaction'),
            responses.get('additional_comments', '')
        ))
        
        conn.execute('UPDATE participants SET is_completed = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

class CSVProcessor:
    """CSV feldolgoz√≥ √©s processed_recipes.csv l√©trehoz√≥"""
    
    @staticmethod
    def create_processed_csv():
        """L√©trehozza a processed_recipes.csv f√°jlt ha nem l√©tezik"""
        processed_path = project_root / "data" / "processed_recipes.csv"
        
        # Ha m√°r l√©tezik, ne √≠rjuk fel√ºl
        if processed_path.exists():
            print(f"‚úÖ processed_recipes.csv m√°r l√©tezik: {processed_path}")
            return processed_path
        
        print("üîß processed_recipes.csv l√©trehoz√°sa...")
        
        # Data mappa l√©trehoz√°sa
        os.makedirs(processed_path.parent, exist_ok=True)
        
        # El≈ësz√∂r pr√≥b√°ljuk a hungarian_recipes_github.csv-t
        original_csv = project_root / "hungarian_recipes_github.csv"
        
        if original_csv.exists():
            print(f"üìä Eredeti CSV feldolgoz√°sa: {original_csv}")
            return CSVProcessor.process_original_csv(original_csv, processed_path)
        else:
            print("‚ö†Ô∏è hungarian_recipes_github.csv nem tal√°lhat√≥, sample CSV l√©trehoz√°sa")
            return CSVProcessor.create_sample_csv(processed_path)
    
    @staticmethod
    def process_original_csv(original_path, output_path):
        """Eredeti CSV feldolgoz√°sa"""
        try:
            # T√∂bbf√©le encoding pr√≥b√°l√°sa
            encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
            df = None
            
            for encoding in encodings:
                try:
                    df = pd.read_csv(original_path, encoding=encoding)
                    print(f"‚úÖ CSV bet√∂ltve {encoding} encoding-gal")
                    break
                except UnicodeDecodeError:
                    continue
            
            if df is None:
                print("‚ùå CSV bet√∂lt√©s sikertelen, sample adatok")
                return CSVProcessor.create_sample_csv(output_path)
            
            print(f"üìã Eredeti CSV: {len(df)} recept, oszlopok: {list(df.columns)}")
            
            # Oszlop mapping
            column_mapping = {
                'name': 'title',
                'ingredients': 'ingredients',
                'instructions': 'instructions',
                'images': 'images',
                'env_score': 'env_score_raw',
                'nutri_score': 'nutri_score_raw',
                'meal_score': 'meal_score_raw'
            }
            
            # Rename columns
            df = df.rename(columns=column_mapping)
            
            # Recipe ID hozz√°ad√°sa
            df['recipeid'] = range(1, len(df) + 1)
            
            # Scores normaliz√°l√°sa
            df = CSVProcessor.normalize_scores(df)
            
            # Sample v√°laszt√°s (50 recept)
            sample_size = min(50, len(df))
            df_sample = df.sample(n=sample_size)
            
            # Ment√©s
            df_sample.to_csv(output_path, index=False, encoding='utf-8')
            print(f"‚úÖ Processed CSV mentve: {output_path} ({len(df_sample)} recept)")
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå CSV feldolgoz√°si hiba: {e}")
            return CSVProcessor.create_sample_csv(output_path)
    
    @staticmethod
    def normalize_scores(df):
        """Score-ok normaliz√°l√°sa 0-100 sk√°l√°ra"""
        
        # Environmental Score - inverz (kisebb = jobb k√∂rnyezetileg)
        if 'env_score_raw' in df.columns:
            env_min, env_max = df['env_score_raw'].min(), df['env_score_raw'].max()
            df['ESI'] = 100 - ((df['env_score_raw'] - env_min) / (env_max - env_min) * 100)
        else:
            df['ESI'] = 70.0  # default
        
        # Health Score - direkt (nagyobb = jobb)
        if 'nutri_score_raw' in df.columns:
            nutri_max = df['nutri_score_raw'].max()
            if nutri_max > 100:
                df['HSI'] = (df['nutri_score_raw'] / nutri_max) * 100
            else:
                df['HSI'] = df['nutri_score_raw']
        else:
            df['HSI'] = 75.0  # default
        
        # Popularity Score - direkt (nagyobb = n√©pszer≈±bb)
        if 'meal_score_raw' in df.columns:
            meal_max = df['meal_score_raw'].max()
            if meal_max > 100:
                df['PPI'] = (df['meal_score_raw'] / meal_max) * 100
            else:
                df['PPI'] = df['meal_score_raw']
        else:
            df['PPI'] = 80.0  # default
        
        # Composite score
        df['composite_score'] = (df['ESI'] * 0.4 + df['HSI'] * 0.4 + df['PPI'] * 0.2)
        
        print(f"üìä Score tartom√°nyok:")
        print(f"   HSI: {df['HSI'].min():.1f} - {df['HSI'].max():.1f}")
        print(f"   ESI: {df['ESI'].min():.1f} - {df['ESI'].max():.1f}")
        print(f"   PPI: {df['PPI'].min():.1f} - {df['PPI'].max():.1f}")
        
        return df
    
    @staticmethod
    def create_sample_csv(output_path):
        """Sample CSV l√©trehoz√°sa ha nincs eredeti"""
        print("üîß Sample CSV l√©trehoz√°sa k√ºls≈ë k√©pekkel...")
        
        sample_recipes = [
            {
                'recipeid': 1,
                'title': 'Hagyom√°nyos Guly√°sleves',
                'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
                'instructions': 'A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
                'images': 'https://images.unsplash.com/photo-1547592180-85f173990554?w=400&h=300&fit=crop',
                'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
            },
            {
                'recipeid': 2,
                'title': 'R√°ntott Schnitzel Burgony√°val',
                'ingredients': 'sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors',
                'instructions': 'A h√∫st kikalap√°ljuk √©s megs√≥zzuk. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. A burgony√°t h√©j√°ban megf≈ëzz√ºk.',
                'images': 'https://images.unsplash.com/photo-1558030006-450675393462?w=400&h=300&fit=crop',
                'HSI': 55.0, 'ESI': 45.0, 'PPI': 85.0, 'composite_score': 57.0
            },
            {
                'recipeid': 3,
                'title': 'Veget√°ri√°nus Lecs√≥',
                'ingredients': 'paprika, paradicsom, hagyma, toj√°s, tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
                'instructions': 'A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. Hozz√°adjuk a felszeletelt paprik√°t. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. Toj√°ssal d√∫s√≠tjuk.',
                'images': 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',
                'HSI': 85.0, 'ESI': 80.0, 'PPI': 70.0, 'composite_score': 78.0
            },
            {
                'recipeid': 4,
                'title': 'Hal√°szl√© Szegedi M√≥dra',
                'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
                'instructions': 'A halakat megtiszt√≠tjuk √©s feldaraboljuk. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. Paprik√°val √≠zes√≠tj√ºk.',
                'images': 'https://images.unsplash.com/photo-1544943910-4c1dc44aab44?w=400&h=300&fit=crop',
                'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
            },
            {
                'recipeid': 5,
                'title': 'T√∂lt√∂tt K√°poszta',
                'ingredients': 'savany√∫ k√°poszta, dar√°lt h√∫s, rizs, hagyma, paprika, kolb√°sz, tejf√∂l',
                'instructions': 'A k√°posztaleveleket leforr√°zuk √©s h√∫sos rizzsel megt√∂ltj√ºk. R√©tegesen f≈ëzz√ºk kolb√°szdarabokkal √©s tejf√∂llel t√°laljuk.',
                'images': 'https://images.unsplash.com/photo-1574484284002-952d92456975?w=400&h=300&fit=crop',
                'HSI': 70.0, 'ESI': 55.0, 'PPI': 88.0, 'composite_score': 67.6
            },
            {
                'recipeid': 6,
                'title': 'T√∫r√≥s Csusza',
                'ingredients': 'sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna, hagyma, s√≥, bors',
                'instructions': 'A t√©szt√°t s√≥s v√≠zben megf≈ëzz√ºk √©s lesz≈±rj√ºk. A szalonn√°t kock√°kra v√°gjuk √©s kis√ºtj√ºk. A t√©szt√°t √∂sszekeverj√ºk a t√∫r√≥val, tejf√∂llel √©s a szalonn√°val.',
                'images': 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=400&h=300&fit=crop',
                'HSI': 65.0, 'ESI': 55.0, 'PPI': 80.0, 'composite_score': 65.0
            },
            {
                'recipeid': 7,
                'title': 'Gombapaprik√°s Galusk√°val',
                'ingredients': 'gomba, hagyma, paprika, tejf√∂l, liszt, toj√°s, petrezselyem, olaj',
                'instructions': 'A gomb√°t felszeletelj√ºk √©s kis√ºtj√ºk. Hagym√°t dinsztel√ºnk, paprik√°t adunk hozz√°. A gomb√°t hozz√°adjuk, tejf√∂llel lefuttatjuk. Galusk√°t f≈ëz√ºnk mell√©.',
                'images': 'https://images.unsplash.com/photo-1565299507177-b0ac66763828?w=400&h=300&fit=crop',
                'HSI': 70.0, 'ESI': 75.0, 'PPI': 65.0, 'composite_score': 70.0
            },
            {
                'recipeid': 8,
                'title': 'R√°k√≥czi T√∫r√≥s',
                'ingredients': 't√∫r√≥, toj√°s, cukor, tejf√∂l, mazsola, citromh√©j, van√≠liapor',
                'instructions': 'A t√∫r√≥t √°tnyomjuk szit√°n √©s √∂sszekeverj√ºk a toj√°sokkal. Cukrot, mazsol√°t √©s citromh√©jat adunk hozz√°. S√ºt≈ëform√°ban megs√ºtj√ºk. Tejf√∂l√∂s kr√©mmel t√°laljuk.',
                'images': 'https://images.unsplash.com/photo-1571877227200-a0d98ea607e9?w=400&h=300&fit=crop',
                'HSI': 60.0, 'ESI': 65.0, 'PPI': 85.0, 'composite_score': 68.0
            },
            {
                'recipeid': 9,
                'title': 'Z√∂lds√©ges Ratatouille',
                'ingredients': 'cukkini, padlizs√°n, paprika, paradicsom, hagyma, fokhagyma, ol√≠vaolaj, bazsalikom',
                'instructions': 'Az √∂sszes z√∂lds√©get kock√°kra v√°gjuk. A hagym√°t √©s fokhagym√°t megpir√≠tjuk. R√©tegesen hozz√°adjuk a z√∂lds√©geket. Bazsalikommal √©s f≈±szerekkel √≠zes√≠tj√ºk.',
                'images': 'https://images.unsplash.com/photo-1572441713132-51c75654db73?w=400&h=300&fit=crop',
                'HSI': 90.0, 'ESI': 85.0, 'PPI': 60.0, 'composite_score': 79.0
            },
            {
                'recipeid': 10,
                'title': 'Hortob√°gyi Palacsinta',
                'ingredients': 'palacsinta, csirkeh√∫s, gomba, hagyma, paprika, tejf√∂l, sajt',
                'instructions': 'Palacsint√°t s√ºt√ºnk. A csirkeh√∫st megp√°roljuk gomb√°val √©s hagym√°val. A palacsint√°kat megt√∂ltj√ºk √©s feltekerj√ºk. Tejf√∂l√∂s m√°rt√°ssal s√ºt≈ëben √°tmeleg√≠tj√ºk.',
                'images': 'https://images.unsplash.com/photo-1593560708920-61dd2833c471?w=400&h=300&fit=crop',
                'HSI': 70.0, 'ESI': 60.0, 'PPI': 80.0, 'composite_score': 68.0
            }
        ]
        
        df = pd.DataFrame(sample_recipes)
        df.to_csv(output_path, index=False, encoding='utf-8')
        
        print(f"‚úÖ Sample CSV l√©trehozva: {len(df)} recept")
        print(f"üñºÔ∏è K√ºls≈ë k√©pek Unsplash-b≈ël")
        
        return output_path

class EnhancedRecipeRecommender:
    """Recept aj√°nl√≥ rendszer - JAV√çTOTT"""
    
    def __init__(self):
        # CSV l√©trehoz√°sa/ellen≈ërz√©se
        self.csv_path = CSVProcessor.create_processed_csv()
        self.recipes_df = self.load_recipes()
        
        print(f"üçΩÔ∏è Recept rendszer inicializ√°lva: {len(self.recipes_df) if self.recipes_df is not None else 0} recept")
    
    def load_recipes(self):
        """Receptek bet√∂lt√©se CSV-b≈ël"""
        try:
            if not self.csv_path.exists():
                print(f"‚ùå CSV nem tal√°lhat√≥: {self.csv_path}")
                return None
            
            df = pd.read_csv(self.csv_path)
            print(f"‚úÖ CSV bet√∂ltve: {len(df)} recept")
            
            # K√∂telez≈ë oszlopok ellen≈ërz√©se
            required_cols = ['recipeid', 'title', 'ingredients', 'images', 'HSI', 'ESI', 'PPI']
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                print(f"‚ö†Ô∏è Hi√°nyz√≥ oszlopok: {missing_cols}")
                return None
            
            # Debug: k√©pek ellen≈ërz√©se
            print(f"üñºÔ∏è K√©pek ellen≈ërz√©se:")
            for i in range(min(3, len(df))):
                recipe = df.iloc[i]
                print(f"   {recipe['title']}: {recipe['images']}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå CSV bet√∂lt√©si hiba: {e}")
            return None
    
    def get_recommendations(self, version='v1', n_recommendations=5):
        """Aj√°nl√°sok lek√©r√©se"""
        if self.recipes_df is None or len(self.recipes_df) == 0:
            print("‚ùå Nincs recept adat!")
            return []
        
        # Sample kiv√°laszt√°s
        sample_size = min(n_recommendations, len(self.recipes_df))
        recommendations = self.recipes_df.sample(n=sample_size).to_dict('records')
        
        # Magyar√°zatok hozz√°ad√°sa
        for rec in recommendations:
            if version in ['v2', 'v3']:
                rec['explanation'] = self.generate_explanation(rec, version)
        
        print(f"‚úÖ {len(recommendations)} aj√°nl√°s gener√°lva ({version})")
        
        # Debug: aj√°nl√°sok ellen≈ërz√©se
        print("üîç Aj√°nl√°s debug:")
        for i, rec in enumerate(recommendations):
            print(f"   {i+1}. {rec['title']} - K√©p: {rec.get('images', 'NINCS')[:60]}...")
        
        return recommendations
    
    def generate_explanation(self, recipe, version):
        """Magyar√°zat gener√°l√°sa"""
        explanations = []
        
        if recipe['HSI'] > 70:
            explanations.append("üíö Magas t√°p√©rt√©k √©s eg√©szs√©ges √∂sszetev≈ëk")
        if recipe['ESI'] > 70:
            explanations.append("üå± K√∂rnyezetbar√°t ingrediensek")
        if recipe['PPI'] > 80:
            explanations.append("‚≠ê N√©pszer≈± √©s kipr√≥b√°lt recept")
        
        if not explanations:
            explanations.append("üçΩÔ∏è Kiegyens√∫lyozott √∂sszet√©tel")
        
        if version == 'v3':
            detailed = f"Ez a recept {recipe['composite_score']:.0f}/100 pontot √©rt el √∂sszes√≠tett √©rt√©kel√©s√ºnkben. "
            detailed += " ‚Ä¢ ".join(explanations)
            return detailed
        else:
            return " ‚Ä¢ ".join(explanations)

# Global objektumok
db = UserStudyDatabase()
recommender = EnhancedRecipeRecommender()

def get_user_version():
    if 'version' not in session:
        versions = ['v1', 'v2', 'v3']
        session['version'] = random.choice(versions)
    return session['version']

# ROUTES

@user_study_bp.route('/')
def welcome():
    return render_template('welcome.html')

@user_study_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            age_group = request.form.get('age_group')
            education = request.form.get('education')
            cooking_frequency = request.form.get('cooking_frequency')
            sustainability_awareness = int(request.form.get('sustainability_awareness', 3))
            
            version = get_user_version()
            user_id = db.create_user(age_group, education, cooking_frequency, 
                                   sustainability_awareness, version)
            
            session['user_id'] = user_id
            session['version'] = version
            
            return redirect(url_for('user_study.instructions'))
            
        except Exception as e:
            print(f"Registration error: {e}")
            return render_template('register.html', error='Regisztr√°ci√≥ sikertelen')
    
    return render_template('register.html')

@user_study_bp.route('/instructions')
def instructions():
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    version = session.get('version', 'v1')
    return render_template('instructions.html', version=version)

@user_study_bp.route('/study')
def study():
    """F≈ë tanulm√°ny oldal - K√âPEKKEL √âS CSV ADATOKKAL"""
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    version = session.get('version', 'v1')
    
    # Aj√°nl√°sok lek√©r√©se
    recommendations = recommender.get_recommendations(version=version, n_recommendations=5)
    
    if not recommendations:
        return "‚ùå Hiba: Nem siker√ºlt bet√∂lteni a recepteket. Ellen≈ërizd a CSV f√°jlokat.", 500
    
    print(f"üîç Template-nek √°tadott {len(recommendations)} aj√°nl√°s ({version})")
    
    return render_template('study.html', 
                         recommendations=recommendations, 
                         version=version)

@user_study_bp.route('/rate_recipe', methods=['POST'])
def rate_recipe():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user_id = session['user_id']
    data = request.get_json()
    
    recipe_id = int(data.get('recipe_id'))
    rating = int(data.get('rating'))
    explanation_helpful = data.get('explanation_helpful')
    view_time = data.get('view_time_seconds', 0)
    interaction_order = data.get('interaction_order', 0)
    
    db.log_interaction(user_id, recipe_id, rating, explanation_helpful, view_time, interaction_order)
    
    return jsonify({'status': 'success'})

@user_study_bp.route('/questionnaire', methods=['GET', 'POST'])
def questionnaire():
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    if request.method == 'POST':
        user_id = session['user_id']
        
        responses = {
            'system_usability': request.form.get('system_usability'),
            'recommendation_quality': request.form.get('recommendation_quality'),
            'trust_level': request.form.get('trust_level'),
            'explanation_clarity': request.form.get('explanation_clarity'),
            'sustainability_importance': request.form.get('sustainability_importance'),
            'overall_satisfaction': request.form.get('overall_satisfaction'),
            'additional_comments': request.form.get('additional_comments', '')
        }
        
        db.save_questionnaire(user_id, responses)
        return redirect(url_for('user_study.thank_you'))
    
    version = session.get('version', 'v1')
    return render_template('questionnaire.html', version=version)

@user_study_bp.route('/thank_you')
def thank_you():
    version = session.get('version', 'v1')
    return render_template('thank_you.html', version=version)

@user_study_bp.route('/admin/stats')
def admin_stats():
    """Admin statisztik√°k"""
    try:
        conn = db.get_connection()
        
        stats = {}
        
        # Alapstatisztik√°k
        result = conn.execute('SELECT COUNT(*) as count FROM participants').fetchone()
        stats['total_participants'] = result['count'] if result else 0
        
        result = conn.execute('SELECT COUNT(*) as count FROM participants WHERE is_completed = 1').fetchone()
        stats['completed_participants'] = result['count'] if result else 0
        
        if stats['total_participants'] > 0:
            stats['completion_rate'] = stats['completed_participants'] / stats['total_participants']
        else:
            stats['completion_rate'] = 0
        
        # Verzi√≥ eloszl√°s
        version_results = conn.execute('''
            SELECT version, 
                   COUNT(*) as count,
                   SUM(CASE WHEN is_completed = 1 THEN 1 ELSE 0 END) as completed
            FROM participants 
            GROUP BY version
        ''').fetchall()
        
        stats['version_distribution'] = [dict(row) for row in version_results]
        
        # √Åtlagos √©rt√©kel√©sek
        rating_results = conn.execute('''
            SELECT p.version, AVG(i.rating) as avg_rating, COUNT(i.rating) as count
            FROM participants p
            JOIN interactions i ON p.user_id = i.user_id
            WHERE i.rating IS NOT NULL
            GROUP BY p.version
        ''').fetchall()
        
        stats['average_ratings'] = [dict(row) for row in rating_results]
        
        # K√©rd≈ë√≠v eredm√©nyek
        questionnaire_results = conn.execute('''
            SELECT p.version,
                   AVG(q.system_usability) as avg_usability,
                   AVG(q.recommendation_quality) as avg_quality,
                   AVG(q.trust_level) as avg_trust,
                   AVG(q.explanation_clarity) as avg_clarity,
                   AVG(q.overall_satisfaction) as avg_satisfaction
            FROM participants p
            JOIN questionnaire q ON p.user_id = q.user_id
            GROUP BY p.version
        ''').fetchall()
        
        stats['questionnaire_results'] = [dict(row) for row in questionnaire_results]
        
        # √Åtlagos interakci√≥k
        interactions_count = conn.execute('SELECT COUNT(*) as count FROM interactions').fetchone()
        if stats['total_participants'] > 0:
            stats['avg_interactions_per_user'] = interactions_count['count'] / stats['total_participants']
        else:
            stats['avg_interactions_per_user'] = 0
        
        conn.close()
        
        return render_template('admin_stats.html', stats=stats)
        
    except Exception as e:
        return f"Stats error: {e}", 500

# DEBUG route CSV ellen≈ërz√©shez
@user_study_bp.route('/debug/csv')
def debug_csv():
    """CSV debug inform√°ci√≥k"""
    try:
        result = "<h2>üîç CSV Debug Information</h2>"
        
        # Processed CSV ellen≈ërz√©s
        csv_path = project_root / "data" / "processed_recipes.csv"
        result += f"<h3>üìä Processed CSV Status:</h3>"
        result += f"Path: {csv_path}<br>"
        result += f"Exists: {'‚úÖ YES' if csv_path.exists() else '‚ùå NO'}<br>"
        
        if csv_path.exists():
            try:
                df = pd.read_csv(csv_path)
                result += f"Rows: {len(df)}<br>"
                result += f"Columns: {list(df.columns)}<br><br>"
                
                result += "<h3>üñºÔ∏è Image URLs (first 3):</h3>"
                for i in range(min(3, len(df))):
                    recipe = df.iloc[i]
                    result += f"<b>{recipe['title']}:</b><br>"
                    result += f"Image: {recipe.get('images', 'NINCS')}<br><br>"
                
            except Exception as e:
                result += f"CSV read error: {e}<br>"

      # Add this debug route to user_study.py

@user_study_bp.route('/debug/esi_zero')
def debug_esi_zero():
    """Debug ESI=0 values"""
    try:
        result = "<h2>üîç ESI=0 Debug Analysis</h2>"
        
        # Load processed CSV
        csv_path = project_root / "data" / "processed_recipes.csv"
        if not csv_path.exists():
            return "‚ùå processed_recipes.csv not found"
        
        df = pd.read_csv(csv_path)
        result += f"<h3>üìä CSV Statistics:</h3>"
        result += f"Total recipes: {len(df)}<br>"
        
        # Check score columns
        score_cols = ['ESI', 'HSI', 'PPI', 'composite_score']
        for col in score_cols:
            if col in df.columns:
                min_val = df[col].min()
                max_val = df[col].max()
                mean_val = df[col].mean()
                zero_count = (df[col] == 0).sum()
                
                result += f"<b>{col}:</b> {min_val:.2f} - {max_val:.2f} (avg: {mean_val:.2f}, zeros: {zero_count})<br>"
        
        # Check raw scores if available
        result += f"<h3>üå± Raw Environmental Scores:</h3>"
        if 'env_score_raw' in df.columns:
            env_min = df['env_score_raw'].min()
            env_max = df['env_score_raw'].max()
            env_mean = df['env_score_raw'].mean()
            
            result += f"env_score_raw range: {env_min:.2f} - {env_max:.2f} (avg: {env_mean:.2f})<br>"
            
            # Show normalization calculation
            result += f"<h4>Normalization Formula:</h4>"
            result += f"ESI = 100 - ((env_score_raw - {env_min:.2f}) / ({env_max:.2f} - {env_min:.2f}) * 100)<br><br>"
            
            # Show examples
            result += f"<h4>Normalization Examples:</h4>"
            sample_recipes = df.head(5)
            for _, recipe in sample_recipes.iterrows():
                raw_env = recipe['env_score_raw']
                esi = recipe['ESI']
                
                if env_max > env_min:
                    calculated_esi = 100 - ((raw_env - env_min) / (env_max - env_min) * 100)
                else:
                    calculated_esi = 70.0
                
                result += f"<b>{recipe['title'][:40]}...</b><br>"
                result += f"   Raw env_score: {raw_env:.2f}<br>"
                result += f"   Stored ESI: {esi:.2f}<br>"
                result += f"   Calculated ESI: {calculated_esi:.2f}<br>"
                result += f"   Match: {'‚úÖ' if abs(esi - calculated_esi) < 0.01 else '‚ùå'}<br><br>"
        
        # Find recipes with ESI=0
        zero_esi_recipes = df[df['ESI'] == 0]
        if len(zero_esi_recipes) > 0:
            result += f"<h3>‚ùå Recipes with ESI=0 ({len(zero_esi_recipes)} found):</h3>"
            for _, recipe in zero_esi_recipes.head(10).iterrows():
                result += f"<b>{recipe['title']}:</b><br>"
                result += f"   ESI: {recipe['ESI']:.2f}<br>"
                result += f"   HSI: {recipe['HSI']:.2f}<br>"
                result += f"   PPI: {recipe['PPI']:.2f}<br>"
                if 'env_score_raw' in df.columns:
                    result += f"   Raw env_score: {recipe['env_score_raw']:.2f}<br>"
                result += f"<br>"
        else:
            result += f"<h3>‚úÖ No recipes with ESI=0 found</h3>"
        
        # Composite score verification
        result += f"<h3>üî¢ Composite Score Verification:</h3>"
        sample = df.sample(n=3)
        for _, recipe in sample.iterrows():
            stored_composite = recipe['composite_score']
            calculated_composite = recipe['ESI'] * 0.4 + recipe['HSI'] * 0.4 + recipe['PPI'] * 0.2
            
            result += f"<b>{recipe['title'][:40]}...</b><br>"
            result += f"   ESI: {recipe['ESI']:.1f}, HSI: {recipe['HSI']:.1f}, PPI: {recipe['PPI']:.1f}<br>"
            result += f"   Stored composite: {stored_composite:.2f}<br>"
            result += f"   Calculated composite: {calculated_composite:.2f}<br>"
            result += f"   Match: {'‚úÖ' if abs(stored_composite - calculated_composite) < 0.01 else '‚ùå'}<br><br>"
        
        return result
        
    except Exception as e:
        return f"Debug error: {e}"
        
        # Original CSV ellen≈ërz√©s
        original_csv = project_root / "hungarian_recipes_github.csv"
        result += f"<h3>üìã Original CSV Status:</h3>"
        result += f"Path: {original_csv}<br>"
        result += f"Exists: {'‚úÖ YES' if original_csv.exists() else '‚ùå NO'}<br>"
        
        if original_csv.exists():
            try:
                df_orig = pd.read_csv(original_csv)
                result += f"Rows: {len(df_orig)}<br>"
                result += f"Columns: {list(df_orig.columns)}<br>"
            except Exception as e:
                result += f"Original CSV read error: {e}<br>"
        
        # Recommender status
        result += f"<h3>ü§ñ Recommender Status:</h3>"
        result += f"Recipes loaded: {len(recommender.recipes_df) if recommender.recipes_df is not None else 0}<br>"
        
        # Test recommendation
        try:
            test_recs = recommender.get_recommendations('v1', 2)
            result += f"Test recommendations: {len(test_recs)}<br>"
            if test_recs:
                result += f"First recipe: {test_recs[0]['title']}<br>"
                result += f"First image: {test_recs[0].get('images', 'NINCS')}<br>"
        except Exception as e:
            result += f"Test recommendation error: {e}<br>"
        
        return result
        
    except Exception as e:
        return f"Debug error: {e}"

# Export
__all__ = ['user_study_bp']
